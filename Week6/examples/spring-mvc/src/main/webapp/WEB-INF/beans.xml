<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">

<!-- Enables annotations in this context -->
	<context:annotation-config />

	<!-- Enable annotations -->
	<context:component-scan base-package="com.ex"></context:component-scan>

	<mvc:annotation-driven></mvc:annotation-driven>

	<!-- Configure our resources folder -->
	<mvc:resources location="/static" mapping="/**"></mvc:resources>

	<!-- InternalResourceViewResolver - Bean which provides the required view based
	on view name obtained from controller method
	Note* this is set up for server-side view rendering (we use JS for
	client-side rendering). This uses tools to combine template (HTML) 
	with model data to generate the view BEFORE returning the response 
	to the client 
	This bean (IRVR) can be used to deliver any kind of template baed on
	predefined prefix and suffix
	RE: WEB-INF (Web-information metadata). Putting content in the WEB-INF
	folder makes it an "internal resource", accessible only through our 
	Dispatcher servlet or through a controller via its name -->
	<bean id="viewResolver" 
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/static/"></property>
		<property name="suffix" value=".html"></property>
	</bean>
	
	
	
	
</beans>
